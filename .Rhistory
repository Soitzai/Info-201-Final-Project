layout(title = 'Meteorites by Class',
font = list(color='white'),
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark'),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 25, r = 25,
b = 25, t = 25,
pad = 2))
p
library(shiny)
library(dplyr)
library(plotly)
data <- read.csv("parking.csv", stringsAsFactors = FALSE)
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1Ijoib2xpdmlhYW4iLCJhIjoiY2p0NTUzZmhkMDJzMjRhcXhwbjMxOWIzcCJ9.fDprJTRx1fGX5X3yHkGD6Q')
# data <- read.csv("parking-citations.csv", stringsAsFactors = FALSE)
parking_map <- data %>%
filter(Latitude != 99999) %>%
mutate(lat = Latitude / 100000, long = Longitude / -100000) %>%
group_by(lat, long) %>%
summarise(count = n())
p <- parking_map %>%
plot_mapbox(x = ~lat, y = ~long,
split = ~class, size=2,
mode = 'scattermapbox', hoverinfo='count') %>%
layout(title = 'Meteorites by Class',
font = list(color='white'),
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark'),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 25, r = 25,
b = 25, t = 25,
pad = 2))
p
View(parking_map)
shiny::runApp()
runApp()
dat <- data %>%
group_by(sex, year)
data <- read.csv("master.csv",stringsAsFactors = FALSE)
dat <- data %>%
group_by(sex, year)
dat
dat <- data %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no))
dat
View(dat)
dataa <- data %>% filter(age == "35-54 years")
dataa
dat <- data %>% filter(age == "35-54 years")
dat <- data %>%
filter(age == "35-54 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no))
dat
View(dat)
chartData <- data %>%
filter(age == "35-54 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no))
chartData[1]
chartData <- data %>%
filter(age == "35-54 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
View(chartData)
chartData[1]
chartData_female <- chartData %>%
filter(sex == "female")
chartData_female
chartData_male <- chartData %>%
filter(sex == "male")
chartData_female <- chartData %>%
filter(sex == "female") %>%
select(year, n)
chartData_male <- chartData %>%
filter(sex == "male") %>%
select(year, n)
chartData_female <- chartData %>%
filter(sex == "female") %>%
select(year, n)
chartData_female <- chartData %>%
filter(sex == "female")
chartData_male <- chartData %>%
filter(sex == "male")
chartData_female[2]
lines(year, chartData_female[2], col = "aquamarine4", lwd=3)
chartData <- data %>%
filter(age == "35-54 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
chartData_female <- chartData %>%
filter(sex == "female")
chartData_male <- chartData %>%
filter(sex == "male")
charTitle <- switch(input$radio,
"0-14 years" = "0-14",
"15-24 years" = "15-24",
"25-34 years" = "25-34",
"35-54 years" = "35-54",
"55-74 years" = "55-74",
"75+ years" = "75+"
)
yrange <- range(n)
xrange <- range(year)
plot(xrange, yrange, type = "n", xlab = "", ylab = "",cex.lab=1.5,
main = paste("title", charTitle), sub="")
runApp()
chartData <- data %>%
filter(age == "35-54 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
chartData_female <- chartData %>%
filter(sex == "female")
chartData_male <- chartData %>%
filter(sex == "male")
yrange <- range(n)
yrange <- range(chartData$n)
xrange <- range(chartData$year)
xrange
plot(xrange, yrange, type = "n", xlab = "", ylab = "",cex.lab=1.5,
main = paste("title", charTitle), sub="")
lines(year, chartData_female[2], col = "aquamarine4", lwd=3)
runApp()
plot(xrange, yrange, type = "n", xlab = "", ylab = "",cex.lab=1.5,
main = paste("title"), sub="")
lines(year, chartData_female[2], col = "aquamarine4", lwd=3)
lines(chartData_female$year, chartData_female[2], col = "aquamarine4", lwd=3)
length(chartData_female$year)
length(chartData_female[2])
chartData_female[2]
as.list(chartData_female[2])
length(chartData_female[2])
as.vector(chartData_female[2])
length(as.list(chartData_female[2]))
length(as.vector(chartData_female[2]))
chartData_female$n
length(chartData_female$n)
lines(chartData_female$year, chartData_female$n, col = "aquamarine4", lwd=3)
lines(chartData_female$year, chartData_female$n, col = "aquamarine4", lwd=3)
lines(chartData_male$year, chartData_male$n, col = "firebrick3", lwd=3)
abline(v = input$vertical, lty=2)
abline(v = 2000, lty=2)
legend(2012, 8, c("female", "male"), col = c("aquamarine4", "firebrick3"), pch=15,ncol=1,bty="n", cex=1.1)
if (TRUE) {
abline(h=0)
}
output$lineChart <- renderPlot({
chartData <- data %>%
filter(age == "35-54 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
chartData_female <- chartData %>%
filter(sex == "female")
chartData_male <- chartData %>%
filter(sex == "male")
charTitle <- switch(input$radio,
"0-14 years" = "0-14",
"15-24 years" = "15-24",
"25-34 years" = "25-34",
"35-54 years" = "35-54",
"55-74 years" = "55-74",
"75+ years" = "75+"
)
yrange <- range(chartData$n)
xrange <- range(chartData$year)
plot(xrange, yrange, type = "n", xlab = "", ylab = "",cex.lab=1.5,
main = paste("title"), sub="")
lines(chartData_female$year, chartData_female$n, col = "aquamarine4", lwd=3)
lines(chartData_male$year, chartData_male$n, col = "firebrick3", lwd=3)
abline(v = 2000, lty=2)
legend(2012, 8, c("female", "male"), col = c("aquamarine4", "firebrick3"), pch=15,ncol=1,bty="n", cex=1.1)
if (TRUE) {
abline(h=0)
}
}, height = 500, width = 600)
runApp()
runApp()
runApp()
chartData <- data %>%
filter(age == "0-14 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
chartData
chartData <- data %>%
filter(age == "0-14 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
chartData
runApp()
runApp()
data <- read.csv("master.csv",stringsAsFactors = FALSE)
data <- data %>% filter(year != 2016)
runApp()
runApp()
runApp()
runApp()
height <- chartData %>% filter(year == 2000)
height
chartData
chartData <- data %>%
filter(age == 2000) %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
chartData <- data %>%
filter(age == "5-14 years") %>%
group_by(sex, year) %>%
summarise(n = sum(suicides_no)) %>%
select(year, n, sex)
chartData
height <- chartData %>% filter(year == 2000)
height
height <- chartData %>% filter(year == 2000) %>% select(n)
height <- chartData %>% filter(year == 2000) %>% select(n)
height <- chartData %>% filter(year == 2000)
height$n
height$n[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data
runApp()
runApp()
runApp()
runApp('~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/162dfecc3c82825395e7e4e930db123d/Message/MessageTemp/06780f10a6b71885ffc399936a1d73dc/File')
runApp('~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/162dfecc3c82825395e7e4e930db123d/Message/MessageTemp/06780f10a6b71885ffc399936a1d73dc/File')
runApp('~/Desktop')
runApp('~/Desktop')
runApp()
colnames(newdata)[1:10] <- c(
"Year",
"Sex",
"Age group",
"Suicides number",
"Popualtion",
"Suicides per 100k population",
"HDI / Year",
"Gdp / Year",
"Gdp per capacity",
"Generation"
)
data <- read.csv("master.csv")
newdata <- select(data, year, sex, age, suicides_no, population, suicides.100k.pop, HDI.for.year,  gdp_for_year...., gdp_per_capita...., generation)
colnames(newdata)[1:10] <- c(
"Year",
"Sex",
"Age group",
"Suicides number",
"Popualtion",
"Suicides per 100k population",
"HDI / Year",
"Gdp / Year",
"Gdp per capacity",
"Generation"
)
select_values <- colnames(newdata)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("Suicide Dataset Exploration"),
# Add a `selectInput` for the `x` variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values
),
# Add a `selectInput` for the `y` variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Suicides number"
),
# Add a `sliderInput` to set the `size` of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 1),
# Add a `selectInput` that allows you to select a color from a list of choices
selectInput(
"color",
label = "Color",
choices = list("Orange" = "orange", "Blue" = "blue", "Green" = "green")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
# It should use an `input` with features: `x_var`, `y_var`, `color`, and `size`
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- newdata[[input$x_var]]
y <- newdata[[input$y_var]]
# Store the title of the graph in a variable
title <- paste0("Suicide Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp()
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
runApp()
dat <- data %>% filter(year == input$input_year)
dat <- data %>% filter(year == 2000)
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....)
dat
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = suicides.100k.pop)
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop)
})
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop)
})
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop)
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
data <- read.csv("master.csv",stringsAsFactors = FALSE)
data <- data %>% filter(year != 2016)
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
dat
runApp()
runApp()
line <- lm(dat$gdp_per_capita.... ~ dat$n)
line
runApp()
runApp()
runApp()
runApp()
line <- lm(dat$gdp_per_capita.... ~ dat$n)
line
line$coefficients
line$coefficients[1]
line$coefficients[2]
line$coefficients[2](1)
line$coefficients[2][1]
line$coefficients[2][2]
line$coefficients[2][1]
runApp()
runApp()
runApp()
line$coefficients[2]
as.numeric(line$coefficients[2])
runApp()
runApp()
runApp()
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_for_year....) %>%
summarise(n = sum(suicides_no))
dat
line <- lm(dat$gdp_per_capita.... ~ dat$n)
runApp()
runApp()
runApp()
abline(lm(n~gdp_per_capita...., data=dat))
runApp()
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == input$input_year) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
ggplot() +
geom_point(mapping = aes(x = dat$gdp_per_capita...., y = dat$n),
size = 1,
color = "purple") +
labs(x = "GDP per capita in each country", y = "suicides per 100k population", title = "title")
ggplot() +
geom_point(mapping = aes(x = dat$gdp_per_capita...., y = dat$n),
size = 1,
color = "purple") +
labs(x = "GDP per capita in each country", y = "suicides per 100k population", title = "title")
runApp()
lm(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
abline(lm(gdp_per_capita....~n, data=dat))
for (i in 1:5) {
plot(score~midterm_data[,i], data=midterm_data)
abline(lm(score~midterm_data[,i], data=midterm_data))
}
dat <- data %>%
filter(year == 2013) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
lm(n~gdp_per_capita...., data=dat)
dat <- data %>%
filter(year == 2015) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 1987) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 1985) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 1986) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 1987) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 1988) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 1989) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 2000) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
dat <- data %>%
filter(year == 2010) %>%
group_by(country, year, gdp_per_capita....) %>%
summarise(n = sum(suicides.100k.pop))
plot(n~gdp_per_capita...., data=dat)
abline(lm(n~gdp_per_capita...., data=dat))
runApp()
runApp()
for (i in 1:5) {
plot(score~midterm_data[,i], data=midterm_data)
abline(lm(score~midterm_data[,i], data=midterm_data))
}
abline(lm(score~midterm_data[,i], data=midterm_data))
abline(lm(score~midterm_data[,i], data=midterm_data))
runApp()
runApp()
runApp()
runApp()
lm <- lm(gdp_per_capita....~n, data = dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
